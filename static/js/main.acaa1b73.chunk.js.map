{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","components/servises/user.ts","components/PostForm/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","id","username","getUserById","userId","usersFromServer","find","TodoForm","onSubmit","useState","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setUserIdError","action","method","event","preventDefault","htmlFor","type","value","onChange","target","disabled","newTodos","App","setTodos","data","newTodo","Math","max","item","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.acaa1b73.chunk.js","sourcesContent":["import { User } from '../types/User';\n\ntype UserInfoProps = {\n  user: User;\n};\n\nexport const UserInfo:React.FC<UserInfoProps> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo:React.FC<Props> = ({ todo }) => {\n  return (\n    <>\n      <article\n        data-id=\"1\"\n        className={classNames(\n          'TodoInfo',\n          {\n            'TodoInfo--completed': todo.completed,\n          },\n        )}\n      >\n        <h2 className=\"TodoInfo__title\">\n          {todo.title}\n        </h2>\n\n        {todo.user && (<UserInfo user={todo.user} />)}\n      </article>\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList:React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../../api/users';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId)\n    || null;\n}\n","import { useState } from 'react';\nimport usersFromServer from '../../api/users';\nimport { getUserById } from '../servises/user';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const TodoForm:React.FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState('');\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setUserIdError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError('');\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setUserIdError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title && !userId) {\n      setHasTitleError('Please enter some text');\n      setUserIdError(!userId);\n    }\n\n    if (!userId || !title) {\n      return;\n    }\n\n    onSubmit({\n      id: 0,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    });\n\n    setTitle('');\n    setUserId(0);\n\n    setHasTitleError('');\n    setUserIdError(false);\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <label className=\"field\" htmlFor=\"post-title\">\n        Title:\n        <input\n          id=\"post-title\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        {hasTitleError && (\n          <span className=\"error\">{hasTitleError}</span>\n        )}\n      </label>\n\n      <label className=\"field\" htmlFor=\"post-user-id\">\n        User:\n        <select\n          data-cy=\"userSelect\"\n          id=\"post-user-id\"\n          value={userId}\n          onChange={handleUserIdChange}\n        >\n          <option value=\"0\" disabled>\n            Choose a user\n          </option>\n\n          {usersFromServer.map(user => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </label>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport { Todo } from './components/types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/PostForm';\nimport todosFromServer from './api/todos';\nimport { getUserById } from './components/servises/user';\n\nexport const newTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nfunction getNewTodoId(data: Todo[]) {\n  const maxId = Math.max(...data.map(\n    item => item.id,\n  ));\n\n  return maxId + 1;\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(newTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewTodoId(todos),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <TodoForm onSubmit={addTodo} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}